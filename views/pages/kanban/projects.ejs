<%- include("../../partials/head.ejs") %>

<style>
    /* Melhorando a usabilidade */
.kanban-column {
  background-color: #f4f4f4;
  padding: 10px;
  margin-right: 10px;
  width: 250px;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  user-select: none; /* Evita a seleção de texto ao arrastar */
}

.kanban-header {
  font-weight: bold;
  text-align: center;
  padding: 5px;
  background-color: #007bff;
  color: white;
  border-radius: 5px;
  cursor: move; /* Mostra que a área é arrastável */
}

.kanban-cards {
  min-height: 50px;
}

.kanban-card {
  background-color: white;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  cursor: move; /* Mostra que os cartões são arrastáveis */
}

.kanban-card textarea {
  width: 100%;
  margin-top: 5px;
  resize: none;
  height: 60px;
  user-select: text; /* Permite a seleção de texto dentro de anotações */
}

.kanban-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 5px;
}

.kanban-actions button {
  margin-left: 5px;
}

</style>


<body id="page-top">
  <div id="wrapper">
    <%- include("../../partials/sidebar.ejs") %>
    <div id="content-wrapper" class="d-flex flex-column">
      <div id="content">
        <%- include("../../partials/topbar.ejs") %>
        <div class="container-fluid">
          <h1 class="h3 mb-2 text-gray-800">Kanban - Projetos</h1>
          <p class="mb-4">Organização de Projetos
          </p>

          <div id="kanban-board" class="row">
            <!-- Os quadros (listas de tarefas) serão renderizados aqui -->
          </div>
          
          <button id="add-board" class="btn btn-primary mt-4">Adicionar Quadro</button>
        
        </div>
      </div>
      <%- include("../../partials/footer.ejs") %>
    </div>
  </div>
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>
  <%- include("../components/modal/logout.ejs") %>
  <script src="/vendor/jquery/jquery.min.js"></script>
  <script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="/vendor/jquery-easing/jquery.easing.min.js"></script>
  <script src="/js/sb-admin-2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>

  <script>
    let kanbanData = <%- JSON.stringify(kanbanData) %>;
  
    // Função para renderizar o Kanban
    function renderKanban() {
      $('#kanban-board').empty(); // Limpa o conteúdo
  
      kanbanData.forEach(board => {
        const boardHtml = `
      <div class="kanban-column" data-id="${board.id}">
        <div class="kanban-header">
          ${board.title}
          <div class="kanban-actions">
            <button class="edit-board btn btn-sm btn-warning" data-id="${board.id}">Editar</button>
            <button class="delete-board btn btn-sm btn-danger" data-id="${board.id}">Excluir</button>
          </div>
        </div>
        <div class="kanban-cards" id="board-${board.id}" data-board-id="${board.id}">
      ${board.cards && board.cards.length > 0 ? board.cards.map(card => `
  <div class="kanban-card" data-id="${card.id}">
    <div class="card-content">${card.content}</div>
    <textarea class="card-notes">${card.notes || ''}</textarea>
    <button class="delete-card btn btn-sm btn-danger mt-2" data-card-id="${card.id}" data-board-id="${board.id}">Excluir</button>
  </div>
`).join('') : 'Nenhum cartão disponível'}
        </div>
        <button class="add-card btn btn-sm btn-secondary mt-2" data-id="${board.id}">Adicionar Cartão</button>
      </div>`;
        $('#kanban-board').append(boardHtml);
      });
  
      // Tornar os cartões arrastáveis
      $('.kanban-cards').each(function() {
        Sortable.create(this, {
          group: "kanban", // Define o grupo para arrastar entre colunas
          animation: 150,
          handle: '.kanban-card', // Define onde o item pode ser arrastado
          onEnd: function(evt) {
            const cardId = evt.item.getAttribute('data-id');
            const originBoardId = evt.from.getAttribute('data-board-id');
            const destinationBoardId = evt.to.getAttribute('data-board-id');
  
            if (!originBoardId || !destinationBoardId) {
              console.error("Board ID não encontrado");
              return;
            }
  
            // Atualizar posição do cartão no array de dados
            updateKanbanData('card', cardId, originBoardId, destinationBoardId);
          }
        });
      });
  
      // Tornar os quadros (boards) arrastáveis
      Sortable.create(document.getElementById('kanban-board'), {
        animation: 150,
        handle: '.kanban-header', // Arrastar apenas pelo cabeçalho do quadro
        onEnd: function(evt) {
          const boardId = evt.item.getAttribute('data-id');
          const newIndex = evt.newIndex;
  
          // Atualizar posição dos quadros no array de dados
          updateKanbanData('board', boardId, newIndex);
        }
      });
    }
  
    // Função genérica para atualizar a posição no array de dados e enviar para o servidor
    function updateKanbanData(type, id, origin, destination = null) {
      if (type === 'card') {
        const originBoard = kanbanData.find(board => board.id == origin);
        const destinationBoard = kanbanData.find(board => board.id == destination);
        const card = originBoard.cards.find(c => c.id == id);
  
        if (!originBoard || !destinationBoard || !card) {
          console.error("Quadro ou cartão não encontrado");
          return;
        }
  
        // Remove o cartão do quadro de origem e adiciona ao destino
        originBoard.cards = originBoard.cards.filter(c => c.id != id);
        destinationBoard.cards.push(card);
      } else if (type === 'board') {
        const board = kanbanData.find(b => b.id == id);
        kanbanData = kanbanData.filter(b => b.id != id);
        kanbanData.splice(destination, 0, board);
      }
  
      // Re-renderiza o Kanban para refletir as mudanças
      renderKanban();
  
      // Faz o PUT request com o array atualizado usando Axios
      axios.put(window.location.href, { kanbanData })
        .then(response => {
          console.log('Atualização enviada para o servidor com sucesso');
        })
        .catch(error => {
          console.error('Erro ao atualizar o Kanban:', error);
        });
    }
  
    // Função para adicionar um novo quadro (board)
    $('#add-board').on('click', function() {
      const boardTitle = prompt('Nome do novo quadro:');
      if (boardTitle) {
        const newBoard = { id: Date.now(), title: boardTitle, cards: [] };
        kanbanData.push(newBoard);
        renderKanban();
  
        // Atualiza o servidor com o novo quadro
        axios.put(window.location.href, { kanbanData })
          .then(response => console.log('Novo quadro adicionado com sucesso'))
          .catch(error => console.error('Erro ao adicionar quadro:', error));
      }
    });
  
    // Função para adicionar um novo cartão (card)
    $(document).on('click', '.add-card', function() {
      const boardId = $(this).data('id');
      const cardContent = prompt('Conteúdo do novo cartão:');
      if (cardContent) {
        const board = kanbanData.find(b => b.id == boardId);
        const newCard = { id: Date.now(), content: cardContent };
        board.cards.push(newCard);
        renderKanban();
  
        // Atualiza o servidor com o novo cartão
        axios.put(window.location.href, { kanbanData })
          .then(response => console.log('Novo cartão adicionado com sucesso'))
          .catch(error => console.error('Erro ao adicionar cartão:', error));
      }
    });

    // Função para editar o título de um quadro (board)
$(document).on('click', '.edit-board', function() {
  const boardId = $(this).data('id');
  const board = kanbanData.find(b => b.id == boardId);
  const newTitle = prompt('Novo título para o quadro:', board.title);
  
  if (newTitle) {
    board.title = newTitle;
    renderKanban();

    // Atualiza o servidor com o novo título do quadro
    axios.put(window.location.href, { kanbanData })
      .then(response => console.log('Título do quadro alterado com sucesso'))
      .catch(error => console.error('Erro ao alterar título do quadro:', error));
  }
});


    // Função para deletar um quadro (board)
$(document).on('click', '.delete-board', function() {
  const boardId = $(this).data('id');
  const boardIndex = kanbanData.findIndex(b => b.id == boardId);
  
  if (confirm('Tem certeza que deseja excluir este quadro?')) {
    if (boardIndex > -1) {
      kanbanData.splice(boardIndex, 1); // Remove o quadro do array
      renderKanban();

      // Atualiza o servidor com o quadro removido
      axios.put(window.location.href, { kanbanData })
        .then(response => console.log('Quadro excluído com sucesso'))
        .catch(error => console.error('Erro ao excluir quadro:', error));
    }
  }
});

// Função para deletar um cartão (card)
$(document).on('click', '.delete-card', function() {
  const cardId = $(this).data('card-id');
  const boardId = $(this).data('board-id');
  const board = kanbanData.find(b => b.id == boardId);
  
  if (confirm('Tem certeza que deseja excluir este cartão?')) {
    const cardIndex = board.cards.findIndex(c => c.id == cardId);
    
    if (cardIndex > -1) {
      board.cards.splice(cardIndex, 1); // Remove o cartão do array
      renderKanban();

      // Atualiza o servidor com o cartão removido
      axios.put(window.location.href, { kanbanData })
        .then(response => console.log('Cartão excluído com sucesso'))
        .catch(error => console.error('Erro ao excluir cartão:', error));
    }
  }
});

// Função para capturar mudanças nas anotações dos cartões
$(document).on('blur', '.card-notes', function() {
  const cardId = $(this).closest('.kanban-card').data('id');
  const boardId = $(this).closest('.kanban-cards').data('board-id');
  const newNotes = $(this).val(); // Pega o valor da anotação

  // Atualizar as notas no array de dados kanbanData
  const board = kanbanData.find(b => b.id == boardId);
  const card = board.cards.find(c => c.id == cardId);

  if (card) {
    card.notes = newNotes; // Atualiza as anotações no objeto de cartão
  }

  // Re-renderiza o Kanban (opcional)
  // renderKanban(); // Se você quiser renderizar novamente após a mudança

  // Envia a atualização para o servidor
  axios.put(window.location.href, { kanbanData })
    .then(response => {
      console.log('Anotações salvas com sucesso');
    })
    .catch(error => {
      console.error('Erro ao salvar anotações:', error);
    });
});



  
    // Renderiza o Kanban inicialmente
    renderKanban();
  </script>
  
  



</body>

</html>